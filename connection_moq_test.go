// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package amqpx

import (
	"github.com/rabbitmq/amqp091-go"
	"sync"
)

// Ensure, that ConnectionMock does implement Connection.
// If this is not the case, regenerate this file with moq.
var _ Connection = &ConnectionMock{}

// ConnectionMock is a mock implementation of Connection.
//
// 	func TestSomethingThatUsesConnection(t *testing.T) {
//
// 		// make and configure a mocked Connection
// 		mockedConnection := &ConnectionMock{
// 			ChannelFunc: func() (Channel, error) {
// 				panic("mock out the Channel method")
// 			},
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			IsClosedFunc: func() bool {
// 				panic("mock out the IsClosed method")
// 			},
// 			NotifyCloseFunc: func(errorCh chan *amqp091.Error) chan *amqp091.Error {
// 				panic("mock out the NotifyClose method")
// 			},
// 		}
//
// 		// use mockedConnection in code that requires Connection
// 		// and then make assertions.
//
// 	}
type ConnectionMock struct {
	// ChannelFunc mocks the Channel method.
	ChannelFunc func() (Channel, error)

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// IsClosedFunc mocks the IsClosed method.
	IsClosedFunc func() bool

	// NotifyCloseFunc mocks the NotifyClose method.
	NotifyCloseFunc func(errorCh chan *amqp091.Error) chan *amqp091.Error

	// calls tracks calls to the methods.
	calls struct {
		// Channel holds details about calls to the Channel method.
		Channel []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// IsClosed holds details about calls to the IsClosed method.
		IsClosed []struct {
		}
		// NotifyClose holds details about calls to the NotifyClose method.
		NotifyClose []struct {
			// ErrorCh is the errorCh argument value.
			ErrorCh chan *amqp091.Error
		}
	}
	lockChannel     sync.RWMutex
	lockClose       sync.RWMutex
	lockIsClosed    sync.RWMutex
	lockNotifyClose sync.RWMutex
}

// Channel calls ChannelFunc.
func (mock *ConnectionMock) Channel() (Channel, error) {
	if mock.ChannelFunc == nil {
		panic("ConnectionMock.ChannelFunc: method is nil but Connection.Channel was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChannel.Lock()
	mock.calls.Channel = append(mock.calls.Channel, callInfo)
	mock.lockChannel.Unlock()
	return mock.ChannelFunc()
}

// ChannelCalls gets all the calls that were made to Channel.
// Check the length with:
//     len(mockedConnection.ChannelCalls())
func (mock *ConnectionMock) ChannelCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChannel.RLock()
	calls = mock.calls.Channel
	mock.lockChannel.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *ConnectionMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ConnectionMock.CloseFunc: method is nil but Connection.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedConnection.CloseCalls())
func (mock *ConnectionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// IsClosed calls IsClosedFunc.
func (mock *ConnectionMock) IsClosed() bool {
	if mock.IsClosedFunc == nil {
		panic("ConnectionMock.IsClosedFunc: method is nil but Connection.IsClosed was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsClosed.Lock()
	mock.calls.IsClosed = append(mock.calls.IsClosed, callInfo)
	mock.lockIsClosed.Unlock()
	return mock.IsClosedFunc()
}

// IsClosedCalls gets all the calls that were made to IsClosed.
// Check the length with:
//     len(mockedConnection.IsClosedCalls())
func (mock *ConnectionMock) IsClosedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsClosed.RLock()
	calls = mock.calls.IsClosed
	mock.lockIsClosed.RUnlock()
	return calls
}

// NotifyClose calls NotifyCloseFunc.
func (mock *ConnectionMock) NotifyClose(errorCh chan *amqp091.Error) chan *amqp091.Error {
	if mock.NotifyCloseFunc == nil {
		panic("ConnectionMock.NotifyCloseFunc: method is nil but Connection.NotifyClose was just called")
	}
	callInfo := struct {
		ErrorCh chan *amqp091.Error
	}{
		ErrorCh: errorCh,
	}
	mock.lockNotifyClose.Lock()
	mock.calls.NotifyClose = append(mock.calls.NotifyClose, callInfo)
	mock.lockNotifyClose.Unlock()
	return mock.NotifyCloseFunc(errorCh)
}

// NotifyCloseCalls gets all the calls that were made to NotifyClose.
// Check the length with:
//     len(mockedConnection.NotifyCloseCalls())
func (mock *ConnectionMock) NotifyCloseCalls() []struct {
	ErrorCh chan *amqp091.Error
} {
	var calls []struct {
		ErrorCh chan *amqp091.Error
	}
	mock.lockNotifyClose.RLock()
	calls = mock.calls.NotifyClose
	mock.lockNotifyClose.RUnlock()
	return calls
}
